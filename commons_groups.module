<?php
/**
 * @file
 * Code for the Commons Groups feature.
 */

include_once 'commons_groups.features.inc';


/**
* Implements hook_system_info_alter().
*/
function commons_groups_system_info_alter(&$info, $file, $type) {
  // Commons Groups dynamically adds the og_group_ref field to
  // content types that request it by altering the
  // commons_groups_entity_types variable.
  // We must add a corresponding line for each field instance
  // to commons_groups.info so that Features is aware of the instance
  // and can sucessfully revert the field_instance component back
  // to its default state.
  if ($file->name == 'commons_groups') {
    $commons_groups_entity_types = variable_get('commons_groups_entity_types', array());
    if (!empty($commons_groups_entity_types['node'])) {
      foreach ($commons_groups_entity_types['node'] as $type => $status) {
        if (!$status) {
          $info['features']['field_instance'][] = "node-$type-og_group_ref";
        }
      }
    }
  }
}

/**
* Implements hook_strongarm_alter().
*/
 function commons_groups_strongarm_alter(&$items) {
  // Expose the Group content type for integration with Commons Radioactivity.
  if (isset($items['commons_radioactivity_entity_types'])) {  
    $items['commons_radioactivity_entity_types']->value['node']['group'] = 1;
  }
}

 function commons_groups_default_rules_configuration_alter(&$configs) {
  // Disable default OG new content notifications.
  // The language doesn't correspond to Commons' open groups model and we use
  // commons_follow and commons_follow_notify for new content notifications.
  $configs['rules_og_member_active']->active = FALSE;
 }

/**
* Implements hook_node_update().
*/
function commons_groups_node_update($node) {
  $account = user_load($node->uid);
  commons_groups_first_contribution($account, $node); 
}

/**
* Implements hook_node_insert().
*/
function commons_groups_node_insert($node) {
  $account = user_load($node->uid);
  commons_groups_first_contribution($account, $node); 
}

/**
* When a user first creates content within a group,
* grant her the contributor role within that group.
*/
function commons_groups_first_contribution($account, $node) {
  // Find the groups that this piece of content belongs to.
  $groups = og_get_entity_groups('node', $node);
  if (!empty($groups)) {
    $node_groups = array_values($groups['node']);
    // Find the groups that the node author belongs to.
    $account_groups = og_get_groups_by_user($account, 'node');
    if (!$account_groups) {
      $account_groups = array();
    }
    // For groups where this user is not already a member, add her to the group.
    $new_groups = array_diff($node_groups, $account_groups);
    if (!empty($new_groups)) {
      foreach ($new_groups as $new_group_nid) {
         og_group('node', $new_group_nid, array('entity' => $account->uid));
      }  
    }
  }
}
