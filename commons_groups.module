<?php
/**
 * @file
 * Code for the Commons Groups feature.
 */

include_once 'commons_groups.features.inc';



/**
* Implements hook_form_alter().
*/
function commons_groups_form_alter(&$form, &$form_state, $form_id) {
  if (in_array($form_id, array('og_ui_admin_global_permissions', 'og_ui_admin_permissions'))) {
    $enabled_node_types = commons_groups_get_enabled_node_types();
    if (!empty($enabled_node_types)) {
      // @TODO: Improve this message to be more specific and/or
      // reflect these changes in the checkboxes.
      $message = 'In addition to the permissions listed here, the Commons Groups module grants non-group members the ability to post content into groups where content in the group is public.';
      drupal_set_message(t($message), 'warning');
    }
  }
}


/**
* Implements hook_system_info_alter().
*/
function commons_groups_system_info_alter(&$info, $file, $type) {
  // Commons Groups dynamically adds the og_group_ref field to
  // content types that request it by altering the
  // commons_groups_entity_types variable.
  // We must add a corresponding line for each field instance
  // to commons_groups.info so that Features is aware of the instance
  // and can sucessfully revert the field_instance component back
  // to its default state.
  if ($file->name == 'commons_groups') {
    $commons_groups_entity_types = commons_groups_get_entity_types();
    if (!empty($commons_groups_entity_types['node'])) {
      foreach ($commons_groups_entity_types['node'] as $type => $status) {
        if ($status && !in_array("node-$type-og_group_ref", $info['features']['field_instance'])) {
          $info['features']['field_instance'][] = "node-$type-og_group_ref";
        }
      }
    }
  }
}

/**
* Implements hook_og_user_access_alter().
*/
function commons_groups_og_user_access_alter(&$temp_perm, $context) {
  // Grant access to non-group members to be able to post into groups
  // where the group node is public and content is public within the group.
  $commons_groups_enabled_node_types = commons_groups_get_enabled_node_types();
  $group_content_restricted = (bool) ($context['group']->group_content_access[LANGUAGE_NONE][0]['value'] == 2);
  // @TODO: Consider using a static here.
  $user_is_member = (bool)og_is_member('node', $context['group']->nid, 'user', $context['account']);
  foreach ($commons_groups_enabled_node_types as $type => $status) {
    if ($context['string'] == "create $type content" && (!$group_content_restricted || $user_is_member)) {
      $temp_perm["create $type content"] = TRUE;
    }
  }
}

/**
* Default value function for the og_group_ref reference field.
* This function is assigned to the field with the default_value_function
* property defined in our instances of the og_group_ref field,
* which takes place in commons_groups_field_definition().
*/
function commons_groups_entityreference_default_value($entity_type, $entity, $field, $instance, $langcode) {
  $field_name = $field['field_name'];

  if (empty($_GET[$field_name]) || !is_string($_GET[$field_name])) {
    return;
  }

  if (empty($instance['settings']['behaviors']['prepopulate']['status'])) {
    return;
  }

  $ids = explode(',', $_GET[$field_name]);

  // Check access to the provided entities.
  $target_type = $field['settings']['target_type'];
  entity_load($target_type, $ids);
  // Remove group nodes hidden by the node access system.
  $items = array();
  foreach ($ids as $target_id) {
    $target = entity_load_single($target_type, $target_id);
    if (entity_access('view', $target_type, $target)
      && og_is_group_type($target_type, $target->type)
      && (og_user_access($target_type, $target_id, "create $entity->type content") || og_user_access($target_type, $id, "update any $entity->type content"))) {
        $items[]= array('target_id' => $target_id);
    }
  }

  return $items;
}

/**
* Implements hook_strongarm_alter().
*/
 function commons_groups_strongarm_alter(&$items) {
  // Expose the Group content type for integration with Commons Radioactivity.
  if (isset($items['commons_radioactivity_entity_types'])) {  
    $items['commons_radioactivity_entity_types']->value['node']['group'] = 1;
  }
}

 function commons_groups_default_rules_configuration_alter(&$configs) {
  // Disable default OG new content notifications.
  // The language doesn't correspond to Commons' open groups model and we use
  // commons_follow and commons_follow_notify for new content notifications.
  $configs['rules_og_member_active']->active = FALSE;
 }

/**
* Implements hook_node_update().
*/
function commons_groups_node_update($node) {
  $account = user_load($node->uid);
  commons_groups_first_contribution($account, $node); 
}

/**
* Implements hook_node_insert().
*/
function commons_groups_node_insert($node) {
  $account = user_load($node->uid);
  commons_groups_first_contribution($account, $node); 
}

/**
* Returns an array of entity types that are enabled via Commons Groups.
*/
function commons_groups_get_entity_types() {
  $commons_groups_entity_types = variable_get('commons_groups_entity_types', array());
  if (!empty($commons_groups_entity_types['node'])) {
    foreach ($commons_groups_entity_types['node'] as $type_name => $enabled) {
      $type = node_type_get_type($type_name);
      // If the module defining this content type has been disabled, don't add
      // a field on its behalf in order to prevent the
      // Commons Groups og_group_ref field component from appearing
      // to be overidden.
      if ($enabled && !module_exists($type->module)) {       
        $commons_groups_entity_types['node'][$type_name] = 0;
      }
    }
  }
  return $commons_groups_entity_types;
}

/**
* Helper function for commons_groups_get_entity_types() to return
* only those node types that are configured as enabled.
*/
function commons_groups_get_enabled_node_types() {
  $commons_groups_entity_types = commons_groups_get_entity_types();
  if (!empty($commons_groups_entity_types['node'])) {
    return array_filter($commons_groups_entity_types['node']);
  }
}
/**
* When a user first creates content within a group,
* grant her the contributor role within that group.
*/
function commons_groups_first_contribution($account, $node) {
  // Find the groups that this piece of content belongs to.
  $groups = og_get_entity_groups('node', $node);
  if (!empty($groups)) {
    $node_groups = array_values($groups['node']);
    // Find the groups that the node author belongs to.
    $account_groups = og_get_groups_by_user($account, 'node');
    if (!$account_groups) {
      $account_groups = array();
    }
    // For groups where this user is not already a member, add her to the group.
    $new_groups = array_diff($node_groups, $account_groups);
    if (!empty($new_groups)) {
      foreach ($new_groups as $new_group_nid) {
         og_group('node', $new_group_nid, array('entity' => $account->uid));
      }  
    }
  }
}

/**
* Implements hook_commons_bw_group_widget().
*/
function commons_groups_commons_bw_group_widget() {
  return array(
    'commons_all' => array(
      'title' => 'All',
      'type' => 'view',
      'vid' => 'commons_bw_all',
      'display' => 'page_1',
      'weight' => -10,
      'default' => 1,
    ),
  );
}
