<?php
/**
 * @file
 * Drupal Commons Events feature.
 */

/**
 * Implements hook_theme().
 */
function commons_events_theme($existing, $type, $theme, $path) {
  return array(
    'commons_events_attending_event' => array(
      'variables' => array(
        'event' => NULL,
      ),
      'file' => '/includes/commons_events.theme.inc',
    ),
    'commons_events_event_attendees' => array(
      'variables' => array(
        'event_nid' => NULL,
      ),
      'file' => '/includes/commons_events.theme.inc',
    ),
  );
}

/**
 * Implements hook_entity_view_alter().
 */
function commons_events_entity_view_alter(&$build, $type) {
  if ($type == 'node' && $build['#node']->type == 'event') {
    $build['attending'] = array(
      0 => theme('commons_events_attending_event', array('event' => $build['#node'])),
      '#weight' => -10,
    );
    $build['attendees'] = array(
      0 => array(
        '#markup' => theme('commons_events_event_attendees', array('event_nid' => $build['#node']->nid)),
      ),
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter();
 */
function commons_events_form_node_form_alter(&$form, &$form_state) {
  if ($form_state['node']->type == 'event') {
    // Remove the '-None-' option from all the dropdowns.
    unset($form['field_location'][$form['field_location']['#language']]['#options']['_none']);
    unset($form['field_registration_type'][$form['field_registration_type']['#language']]['#options']['_none']);
    // Hide the Registration type field.
    $form['field_registration']['#type'] = 'hidden';
    // Address field should be hidden if event is only online.
    $form['field_address']['#states'] = array(
      'invisible' => array(
        ':input[name^="field_location"]' => array('value' => 'online'),
      ),
    );
    // Status and attendee limit are shown if registration is onsite.
    $node_registration_status = 1;
    if (isset($form_state['node']->nid)) {
      $settings = registration_entity_settings('node', $form_state['node']->nid);
      $node_registration_status = $settings['status'];
    }
    $form['field_status'] = array(
      '#type' => 'select',
      '#title' => t('Status'),
      '#options' => array(
        1 => t('Open to new attendees'),
        0 => t('Closed'),
      ),
      '#default_value' => $node_registration_status,
      '#states' => array(
        'visible' => array(
          ':input[name^="field_registration_type"]' => array('value' => 'onsite'),
        ),
      ),
      '#weight' => 10,
    );
    $form['field_number_of_attendees']['#states'] = $form['field_status']['#states'];
    $form['field_number_of_attendees']['#weight'] = 11;
    $form['field_topics']['#weight'] = 12;
    // URL field shown if registration is offsite only.
    $form['field_offsite_url']['#states'] = array(
      'visible' => array(
        ':input[name^="field_registration_type"]' => array('value' => 'external'),
      ),
    );
    $form['#validate'] = array_merge(array('commons_events_node_form_validate'), $form['#validate']);
    $form['#submit'][] = 'commons_events_node_form_submit';
  }
}

/**
 * Custom node form validation handler.
 */
function commons_events_node_form_validate($form, &$form_state) {
  $lng = (isset($form_state['language']) ? $form_state['language'] : LANGUAGE_NONE);
  switch ($form_state['values']['field_registration_type'][$lng]['0']['value']) {
    case 'onsite':
      // Max attendees must be entered if the registration status is open and
      // registration is done onsite.
      if ((int) $form_state['values']['field_status'] == 1
        && (!is_numeric($form_state['values']['field_number_of_attendees'][$lng]['0']['value']))) {
          form_set_error('field_number_of_attendees',
            t('Maximum number of attendees must be set for registrations to be accepted.'));
          return FALSE;
        }
      break;
    case 'external':
      // Must have entered a URL to the offsite registration page.
      if (empty($form_state['values']['field_offsite_url'][$lng]['0']['value'])
        || !valid_url($form_state['values']['field_offsite_url'][$lng]['0']['value'])) {
        form_set_error('field_offsite_url', t('A valid URL is required for offsite registration.'));
        return FALSE;
      }
      break;
  }
  return TRUE;
}

/**
 * Custom node form submit handler.
 */
function commons_events_node_form_submit($form, $form_state) {
  $node = $form_state['node'];
  $lng = (isset($form_state['language']) ? $form_state['language'] : LANGUAGE_NONE);
  if (isset($node->nid)) {
    $settings = registration_entity_settings('node', $node->nid);
    $settings['status'] = (int) $form_state['values']['field_status'];
    if (!empty($form_state['values']['field_number_of_attendees'][$lng]['0']['value'])
      && is_numeric($form_state['values']['field_number_of_attendees'][$lng]['0']['value'])) {
      $settings['capacity'] = (int) $form_state['values']['field_number_of_attendees'][$lng]['0']['value'];
    }
    $settings['settings'] = serialize($settings['settings']);
    registration_update_entity_settings('node', $node->nid, $settings);
  }
}
